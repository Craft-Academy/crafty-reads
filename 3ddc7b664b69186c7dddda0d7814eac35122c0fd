Avant de nous concentrer sur la partie configuration + htmx, concentrons-nous √† faire passer ce test.

La fa√ßon la plus simple de le faire passer est tout simplement de v√©rifier l'existence d'une query dans l'url, ce qui implique que le formulaire a √©t√© envoy√©, et afficher "Book added" dans ce cas :

`src/app.controller.ts`
```diff
 -6,7 +6,7 @@ export class AppController {
   constructor(private readonly appService: AppService) {}

   @Get()
-  getHello(): string {
+  getHello(@Query() query?: { title: string }): string {
     return `
 // ...
   <body>
     <form>
+    ${query?.title ? '<p>Book added</p>' : ''}
       <label for="title">Title</label>
       <input type="text" id="title" name="title">
       <button type="submit">Add book</button>
```

Le decorator @Query permet de r√©cuperer les param√®tres de query de l'url. Quand le formulaire est valid√©, la m√©thode par d√©faut est "GET", encore une fois on fait au plus simple ici. A terme √ßa ne sera pas un GET ;)

S'il y a une query dans l'url, on affiche donc "Book added". Et le test passe :

{% embed url="https://app.arcade.software/share/gLvsvN3nVOT07I5dDwqa" %}

{% hint style="warning" %}
"Mais rien n'emp√™che ici d'√©crire n'importe quoi dans l'url en tant que query title directement et le test passera toujours ! On ne teste rien ici finalement ü§∑üèº"
{% endhint %}

C'est en effet une bonne remarque. C'est parce que le but de ce "test" ici n'est √† cette √©tape pas de tester le bon fonctionnement de notre app, mais de nous servir de guide pour compl√©ter la "step 0" de notre projet !

Prenons un exemple :

`src/app.controller.ts`
```diff
 -1,9 +1,9 @@
 import { Controller, Get, Query } from '@nestjs/common';
-import { AppService } from './app.service';
+import { AddBookUseCase } from './add-book.usecase';

 @Controller()
 export class AppController {
-  constructor(private readonly appService: AppService) {}
+  constructor(private readonly addBookUseCase: AddBookUseCase) {}
```

J'ai simplement ajout√© notre `AddBookUseCase` en tant que d√©pendance. Et notre test ne passe plus ! Eh oui, on a oubli√© de configurer notre injection de d√©pendances...

{% embed url="https://app.arcade.software/share/TSutqxXQsi3ZQ3aPwUB1" %}

{% hint style="warning" %}
"Ouais enfin merci mais j'ai pas besoin d'un test automatis√© pour me dire que j'ai oubli√© de configuer mon injection de d√©pendances hein...Quand j'ai mon app qui tourne en `watch`, l'erreur serait apparue directement aussi, m√™me plus rapidement qu'avec le test !"
{% endhint %}

Et c'est compl√®tement vrai !

Encore une fois, je rappelle qu'ici le r√¥le de notre walking skeleton est d'avoir tout de configur√©, ici le test nous indique effectivement que nous avons mal configur√© l'application, mais c'est un "bonus" en l'occurrence.
